<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on joshuaprunier.com</title>
    <link>http://joshuaprunier.com/tags/go/</link>
    <description>Recent content in Go on joshuaprunier.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright (c) 2015</copyright>
    <lastBuildDate>Mon, 11 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://joshuaprunier.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Trite Bug Fixes and Updates</title>
      <link>http://joshuaprunier.com/blog/2016/trite_updates/post/</link>
      <pubDate>Mon, 11 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://joshuaprunier.com/blog/2016/trite_updates/post/</guid>
      <description>&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;
  &lt;a href=&#34;#&#34; imageanchor=&#34;1&#34; style=&#34;clear: left; float: left; margin-bottom: 0em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://joshuaprunier.com/static/img/gopher_dolphin.jpg&#34;   /&gt;&lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;
I originally released &lt;a href=&#34;https://github.com/joshuaprunier/trite&#34; target=&#34;_blank&#34;&gt;Trite&lt;/a&gt; a little over two years ago. Since then I have continued to fix bugs and add new functionality as spare time allowed. The primary reason for this is that Trite is a tool I often use where I work but another important reason is that I am constantly working to improve my knowledge and abilities. 
&lt;/p&gt;
&lt;p&gt;
The following items are some of the major changes and new functionality available:
&lt;/p&gt;

&lt;p&gt;&lt;style&gt; ul { list-style-position:inside; } &lt;/style&gt;
&lt;div&gt;
  &lt;ul&gt;
      &lt;li&gt;Code is more idiomatic Go&lt;/li&gt;
      &lt;li&gt;Linux, OSX &amp;amp; Windows support&lt;/li&gt;
      &lt;li&gt;Server root landing page&lt;/li&gt;
      &lt;li&gt;Table download and import logic modified&lt;/li&gt;
      &lt;li&gt;Reformatted progress display&lt;/li&gt;
      &lt;li&gt;MySQL Unicode object translation&lt;/li&gt;
      &lt;li&gt;Improved error handling and logging&lt;/li&gt;
      &lt;li&gt;Support for TLS &amp;amp; clear text configured databases&lt;/li&gt;
      &lt;li&gt;Optional compression for slow networks&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;Code is more idiomatic Go&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
This isn&amp;rsquo;t a bug fix or new functionality but is something I consider important. Trite was my first major project in Go so naturally I did some things incorrect or weird being a novice with the language. Making the Trite code more idiomatic Go was about going back and refactoring to make it more readable and hopefully more extensible.
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;Linux, OSX &amp;amp; Windows support&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
One of Go&amp;rsquo;s great features is cross platform compilation. However, some things, like dealing with standard in/out/err is a little different between Windows and Linux/OSX. By switching to the &lt;a href=&#34;https://godoc.org/golang.org/x/crypto/ssh/terminal&#34; target=&#34;_blank&#34;&gt;ssh/terminal&lt;/a&gt; sub-repo Trite is better able to handle prompting the user for a password in a secure manner and also reattaching stdout if the user decides to ctrl+c during the prompting phase. Also windows does not have the same concept of user and group ownership for files that Linux/OSX does and so there are some OS specific exceptions. The majority of the code is the same across platforms though.
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;Server root landing page&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;The Trite server now has a root landing page with links to the structure dump .sql and XtraBackup files. Before you had to travel directly to the /tables or /backups path. Not a huge deal but a nice convenience.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;Table download and import logic modified&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;The way I originally implemented Trite&amp;rsquo;s download and apply logic never really sat well with me. It worked but it was messy, especially if exceptions were encountered during run time. I didn&amp;rsquo;t really understand how to use Go&amp;rsquo;s channels and deal with concurrency properly at the time. With the prior logic, you specified a number of worker threads and Trite would begin downloading that many files at once. Then due to file size differences the downloads and imports would begin to offset. It was a crude attempt to fix a single threaded performance problem where for a single worker during the table import phase nothing was being downloaded. Once I understood this problem properly and had more experience with Go&amp;rsquo;s concurrency primitives a better solution became clear. Create a download queue that is single threaded and allow table imports to perform concurrently if necessary. So the NIC is always in use and not over saturated with multiple file downloads. An additional benefit to this new logic was the ability to clean up and handle errors better when they occur.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;Reformatted progress display&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;The new progress display was a bit tricky to write but makes for a much better user experience. The display is closely related to the new table download and import logic. The problem with the previous logic was that downloading and importing was happening concurrently for many tables. It only made sense to notify when a table had been restored. Otherwise the display output would have been a jumbled mess. The progress display is now single threaded. A table will begin with a status of &amp;ldquo;Downloading,&amp;rdquo; then &amp;ldquo;Applying&amp;rdquo; and finally &amp;ldquo;Restored.&amp;rdquo; A tables status only occupies a single line and that information is rewritten when the status is updated. If a problem occurs then a status of &amp;ldquo;ERROR&amp;rdquo; is shown and information is written to the error file. So if a very large table takes a while to download and apply, the display will stay on an applying status for that table, even though smaller tables may be downloading and importing in the background. As soon as the long running table has finished importing the display will quickly catch up, printing any other tables that may have finished already, stopping on the table currently being processed and its status.&lt;/p&gt;

&lt;p&gt;The display will also now show the download progress for large files. The Trite client defaults to showing the downloaded percentage for any file over 5 gigabytes. The size a file must be for download progress to be shown can be adjusted with the &lt;i&gt;-progressLimit&lt;/i&gt; flag. Some very large tables can take dozens of minutes or hours to download even on a fast internal network and it&amp;rsquo;s nice to see that Trite is in fact still running properly.
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;MySQL Unicode object translation&lt;/b&gt;&lt;/p&gt;
MySQL encodes certain Unicode characters on the file system. If you create a schema or table with the omega character &amp;ldquo;Î©&amp;rdquo; for example, MySQL will create a directory or file named &amp;ldquo;@7P&amp;rdquo; on disk even though the character is properly visible within the database. I referenced the MySQL source code to determine how MySQL does this and created a &lt;a href=&#34;https://github.com/joshuaprunier/mysqlUTF8&#34; target=&#34;_blank&#34;&gt;mysqlUTF8&lt;/a&gt; library in Go for Trite to import. Trite can now properly work with Unicode MySQL objects and find the correct path and file names within an XtraBackup or MySQL data directory. This wasn&amp;rsquo;t something I personally had to deal with where I work but knew it could affect some users and wanted to make sure it was not an issue for non-native English speakers that might want to use Trite.
&lt;p&gt;
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;Improved error handling and logging&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
If something went wrong Trite used to just dump a stack trace to the user. This was not very helpful at all. Trite now does its best to detect when an error occurs, display that an error occurred, log the error and some database information to a file and try to continue processing. That file by default is &amp;ldquo;trite.err&amp;rdquo; in the directory where trite is invoked. The &lt;i&gt;-errorLog&lt;/i&gt; flag allows you to explicitly set the location and name of the error file if desired. If a problem happens during download the partial file is removed. If a problem happens during table import or stored routine, trigger or view creation the current process list and show engine innodb status is captured and also logged to the error file to aid in debugging.
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;Support for TLS &amp;amp; clear text configured databases&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
I added MySQL&amp;rsquo;s clear text client side plugin functionality to the wonderful &lt;a href=&#34;https://github.com/go-sql-driver/mysql#allowcleartextpasswords&#34; target=&#34;_blank&#34;&gt;Go MySQL driver&lt;/a&gt; which Trite uses. I have configured users MySQL accounts where I work to be authenticated via LDAP and not natively within MySQL. So Trite naturally has support via the &lt;i&gt;-tls&lt;/i&gt; flag to use the clear text client side plugin and it also assumes MySQL is configured with TLS to prevent passwords being compromised by tcp capture.
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;Optional compression for slow networks&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
One of Go&amp;rsquo;s primary advantages is being able to take advantage of all cpu cores on a server. &lt;a href=&#34;https://github.com/klauspost/pgzip&#34; target=&#34;_blank&#34;&gt;PGZIP&lt;/a&gt; is a drop in replacement for the standard Go gzip library that allows all cpu cores to be used during compression/decompression. Using Trite to restore a 12 gigabyte database consisting of mostly text across the internet took me about 2 &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; hours. Using on the fly compression with the new &lt;i&gt;-gz&lt;/i&gt; client flag the restore time is reduced to just 30 minutes! A massive time savings and the Trite server in this case was on a fairly under powered Linux vm and the client was a macbook pro laptop. Compressed transfers could be even faster on serious enterprise grade hardware.
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;p&gt;
The next big thing for Trite is probably the ability to serve tables from an active MySQL database instead of an XtraBackup prepared with the &amp;ndash;export option. MySQL 5.6/MariaDB 10 and above support this and it would be a quicker restore option than requiring an XtraBackup. This is a fair amount of work though and I&amp;rsquo;m not sure of the exact time line of when this might be accomplished.
&lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Website</title>
      <link>http://joshuaprunier.com/blog/2014/new_website/post/</link>
      <pubDate>Sat, 27 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://joshuaprunier.com/blog/2014/new_website/post/</guid>
      <description>&lt;p&gt;
I decided to create a new website months ago and have finally gotten around to publishing it. This new site is powered by &lt;a href=&#34;http://gohugo.io/&#34; target=&#34;_blank&#34;&gt;hugo&lt;/a&gt;. My passion for &lt;a href=&#34;http://golang.org/&#34; target=&#34;_blank&#34;&gt;Go&lt;/a&gt; programming recently made me aware of it. It was definitely a lot of initial work to set up the look and feel and convert my content from blogger. Hopefully it will pay off making future blog posts easier to publish with minimal formatting.
&lt;/p&gt;

&lt;p&gt;
Please let me know if you have any feedback on the new site!
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing Trite: A tool for automating import of InnoDB tablespaces</title>
      <link>http://joshuaprunier.com/blog/2014/trite_intro/post/</link>
      <pubDate>Fri, 14 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://joshuaprunier.com/blog/2014/trite_intro/post/</guid>
      <description>&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;
  &lt;a href=&#34;#&#34; imageanchor=&#34;1&#34; style=&#34;clear: left; float: left; margin-bottom: 0em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://joshuaprunier.com/static/img/gopher_dolphin.jpg&#34;   /&gt;&lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;
Mysqldump is a fantastic tool for backing up and restoring small and medium sized MySQL tables and databases quickly. However, when databases surge into the multi-terabyte range restoring from logical backups is inefficient. It can take a significant amount of time to insert a hundred million plus rows to a single table, even with very fast I/O. Programs like MySQL Enterprise Backup and Percona XtraBackup allow non-blocking binary copies of your InnoDB tables to be taken while it is online and processing requests. XtraBackup also has an export feature that allows InnoDB file per tablespaces to be detached from the shared table space and imported to a completely different MySQL instance.
&lt;/p&gt;

&lt;p&gt;
The necessary steps to export and import InnoDB tables are in the XtraBackup documentation &lt;a href=&#34;http://www.percona.com/doc/percona-xtrabackup/2.1/innobackupex/importing_exporting_tables_ibk.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;. Although fairly simple and straight forward it requires a bit too much typing if you want to move more than a couple of tables. To automate the process I created a new open source project named &lt;a href=&#34;https://github.com/joshuaprunier/trite&#34; target=&#34;_blank&#34;&gt;Trite&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Trite stands for &lt;b&gt;TR&lt;/b&gt;ansport &lt;b&gt;I&lt;/b&gt;nnodb &lt;b&gt;T&lt;/b&gt;ables &lt;b&gt;E&lt;/b&gt;fficiently and is also a nod to the repetitive manual steps required to move tablespaces. Trite is a client/server written in 100% &lt;a href=&#34;http://golang.org/&#34; target=&#34;_blank&#34;&gt;Go&lt;/a&gt; that leverages XtraBackups&#39;s import/export feature and aids a DBA in creating, recovering or refreshing databases. The initial problem that led me to create Trite is a common development database environment where I work. Multiple applications share the same database servers which requires each applications data be refreshed at different intervals. Before Trite we used mysqldump and it took the majority of a weekend for the data refresh to complete, even with good hardware and my.cnf&#39;s tuned for performance. With Trite we get the same results in a fraction of the time!
&lt;/p&gt;

&lt;p&gt;
Trite has three modes of operation: dump, server and client. Dump mode writes out create statements for schemas, tables, stored procedures, functions, triggers and views. Server mode makes the XtraBackup and dump create files accessible via a Go powered HTTP server. Client mode downloads the create statements and XtraBackup files from a Trite server to recreate database objects.
&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;p&gt;
Twelve gigabytes of &lt;a href=&#34;http://imdbpy.sourceforge.net/&#34; target=&#34;_blank&#34;&gt;IMDB&lt;/a&gt; data will make a suitably sized database for an example. The hardware used is a woefully under powered laptop; 4 gigs of RAM, 32bit CPU, slow SATA hard drive. Before each data load the imdb schema was removed and MySQL restarted to wipe caches. It took just over two hours to restore from the dump file. This is with innodb_doublewrite turned off to try and speed up all the inserts.
&lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;
jprunier@beefeater:~/Downloads$ ls -alh imdb.sql
-rw-rw-r-- 1 jprunier jprunier 4.8G Jan 24 18:41 imdb.sql

jprunier@beefeater:~/Downloads$ time mysql -uroot -p &lt; imdb.sql
Enter password: 

real    130m55.167s
user    2m16.052s
sys     0m9.020s

jprunier@beefeater:~/Downloads$ sudo du -sh /var/lib/mysql/imdb
[sudo] password for jprunier: 
12G /var/lib/mysql/imdb
&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
&lt;p&gt;
A binary backup of the database took 8 minutes with XtraBackup.
&lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;
root@beefeater:~# time innobackupex --user=root --password= /root

... output omitted ...

innobackupex: Backup created in directory &#39;/root/2014-01-25_14-22-06&#39;
140125 14:30:29  innobackupex: Connection to database server closed
140125 14:30:29  innobackupex: completed OK!

real    8m23.118s
user    0m42.076s
sys     0m31.524s
&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
&lt;p&gt;
And 16 seconds to prepare the tables for export. This will take longer depending on the amount of changes the database receives during the backup. The apply can be sped up by giving the innobackupex process more memory.
&lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;
root@beefeater:~# time innobackupex --apply-log --use-memory=1G --export /root/2014-01-25_14-22-06

... output omitted ...

140125 14:33:03  InnoDB: Starting shutdown...
140125 14:33:07  InnoDB: Shutdown completed; log sequence number 70808870412
140125 14:33:07  innobackupex: completed OK!

real    0m16.310s
user    0m0.900s
sys     0m0.620s
&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
&lt;p&gt;
A dump of the database objects should be done as close to the backup as possible. If the Trite create statement from a dump differs significantly from the copy of table taken with XtraBackup the table may fail to import.
&lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;
root@beefeater:~# ./trite -dump -user=root -password= -host=localhost
Dumping to: /root/localhost_dump20140125173337

Enter password: 

imdb: 21 tables, 0 procedures, 0 functions, 0 triggers, 0 views

22 total objects dumped

Total runtime = 2.19331264s
&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
&lt;p&gt;
In this example the Trite server is being run on the same machine as the database being restored. If your database is very large the backup, create dumps and Trite server will probably be on a different host.
&lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;
root@beefeater:~# screen -S trite_server
root@beefeater:~# ./trite -server -dump_path=/root/localhost_dump20140125173337 -backup_path=/root/2014-01-25_14-22-06

Starting server listening on port 12000
&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
&lt;p&gt;
The Trite client was able to restore the imdb database in 13 minutes. Much faster than doing all those inserts over with mysqldump. You can run the client with multiple worker threads, the default is single threaded. The optimal number of workers depends on the size of your tables, how fast your disks are and how fast your network is if the server is remote. In the case of the laptop, multiple workers actually makes the restore time slower.
&lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;
root@beefeater:~# ./trite -client -user=root -password= -socket=/var/lib/mysql/mysql.sock -server_host=localhost
Enter password: 
imdb.link_type has been restored
imdb.comp_cast_type has been restored
imdb.movie_info has been restored
imdb.aka_name has been restored
imdb.complete_cast has been restored
imdb.movie_link has been restored
imdb.company_name has been restored
imdb.char_name has been restored
imdb.name has been restored
imdb.person_info has been restored
imdb.keyword has been restored
imdb.cast_info has been restored
imdb.role_type has been restored
imdb.aka_title has been restored
imdb.kind_type has been restored
imdb.movie_info_idx has been restored
imdb.movie_keyword has been restored
imdb.company_type has been restored
imdb.info_type has been restored
imdb.title has been restored
imdb.movie_companies has been restored
Applying triggers for imdb
Applying views for imdb
Applying procedures for imdb
Applying functions for imdb

Total runtime = 13m3.881954844s
&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
&lt;p&gt;
Xtrabackup can restore the entire database just as quick but you need to restore the entire backup. The power of Trite is being able to customize a restore. By removing files from the dump directory you can restore just spcific schemas or tables. You can also restore to a database that contains tables while it is online and responding to queries. Some of the features I am planning on adding next are compression for transfer across slow networks and replication support so only objects conforming to a slaves replication filters will be applied.
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;p&gt;
Trite does have some limitations. The full list can be found on the &lt;a href=&#34;http://github.com/joshuaprunier/trite&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt; page but the top ones are:
&lt;/p&gt;&lt;/p&gt;

&lt;div&gt;
  &lt;ul&gt;
    &lt;li&gt;InnoDB file per table is required.&lt;/li&gt;
    &lt;li&gt;The database you are restoring to must be running Percona server 5.1, 5.5, 5.6 or Oracle MySQL 5.6 or MariaDB 5.5, 10.&lt;/li&gt;
    &lt;li&gt;Windows is not currently supported due to a few Linux specific lines of code.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;
If you think Trite might benefit you and your organization give it a try and send me any feedback you might have. I have tried hard to make Trite efficient and bug free but there might be issues when used with certain configurations. Be sure to test Trite on non-critical databases before use in production. If you encounter any bugs please open an issue via GitHub.
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>